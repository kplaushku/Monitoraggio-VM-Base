workflow_name: "vm_monitoring_daily"

trigger:
  type: "scheduled"
  schedule: "0 8 * * *"  # ogni giorno alle 08:00

vm_config:
  critical_vms:
    - name: "web-server-01"
      host: "192.168.1.10"
      services:
        - "apache2"
        - "redis"
    - name: "db-server-01"
      host: "db01.internal.lan"
      services:
        - "mysql"
        - "backupd"

process_steps:
  - step_name: "check_vm_status"
    action: "call_script"
    script_path: "/scripts/monitoring/vm_check.py"
    method: "check_connectivity"
    for_each: "vm_config.critical_vms"
    checks:
      - check_type: "ping"
        expected: "reachable"
      - check_type: "ssh_port"
        expected: "open"

  - step_name: "check_services"
    action: "call_rpa_bot"
    bot_name: "ServiceMonitoring_Bot"
    repository: "RPA_ServiceCheck_Repo"
    for_each: "vm_config.critical_vms"

  - step_name: "generate_report"
    action: "call_script"
    script_path: "/scripts/monitoring/vm_check.py"
    template: "vm_status_template.html"
    format: "pdf"

  - step_name: "send_report"
    action: "call_api"
    api_endpoint: "https://api.company.com/notify"
    method: "POST"
    recipients:
      - "sysadmin@company.com"
    conditions:
      - if: "output_data.issues_found > 0"
        then: "send_notification"
      - if: "output_data.report_generated == true"
        then: "send_report"

output_data:
  report_generated: true
  vm_status_summary:
    total_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    online_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    offline_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    issues_found: "__CALCOLATO_AUTOMATICAMENTE__"

